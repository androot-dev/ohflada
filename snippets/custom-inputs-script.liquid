<script>
  
 
 
 let showIfValues = [];
 let loaded = [];
 let syncdata = null;
 document.addEventListener("ready:owl", function () {
    let dataAsync = new Promise((resolve, reject) => {
        $.getJSON("{{ "custom-inputs.json" | asset_url}}", function (data) {
            resolve(data);
        }).fail(function () {
            reject("error");
        });
    }).then((data) => {
        syncdata = data;
    });

    document.addEventListener("submit", function (e) {
        let modal = document.querySelector("#modal-details.show");
        let buttons = modal.querySelectorAll("button");
        buttons.forEach(function(el){
          el.disabled = true;
        });
        document.body.classList.add("sending-form");
        if (modal) {  
            setTimeout(function(){
              
              $("#modal-details").modal("hide");
               document.body.classList.remove("sending-form");
               buttons.forEach(function(el){
                  el.disabled = false;
              });
            }, 1000)
            
        }
    });
   
 });
 
     
 
 
    function loadInputs(collection, id, data) {
        let inputs = data[collection];
        
        for (let i in inputs) {
            let custom = document.createElement("div");
            custom.innerHTML = `<label for="${inputs[i].name}">${inputs[i].name}</label>`;
           
            switch (inputs[i].type) {
                case "select":
                    custom.classList.add("custom-input", "select-custom");
                    let select = document.createElement("select");
                    select.name = "properties[" + inputs[i].name + "]";
                    select.id = inputs[i].name + "-" + id;
                    // agregar las options
                    for (let opt in inputs[i].options) {
                        let option = document.createElement("option");
                        option.value = inputs[i].options[opt];
                        option.innerHTML = inputs[i].options[opt];
                        select.appendChild(option);
                    }
                    if (inputs[i].placeholder) {
                        let option = document.createElement("option");
                        option.value = "";
                        option.disabled = true;
                        option.innerHTML = inputs[i].placeholder;
                        //agregar la option al inicio
                        select.insertBefore(option, select.firstChild);
                    }
                    custom.appendChild(select);
                    document.querySelector("#custom-inputs-" + id).appendChild(custom);
                    break;
    
                case "text":
                    custom.classList.add("custom-input", "text-custom");
                    let input = document.createElement("input");
                    input.type = "text";
                    input.name = "properties[" + inputs[i].name + "]";
                    input.id = inputs[i].name + "-" + id;
                    input.placeholder = inputs[i].placeholder;
                    if (inputs[i].maxlength) {
                        input.setAttribute("maxlength", inputs[i].maxlength);
                    }
    
                    custom.appendChild(input);
                    document.querySelector("#custom-inputs-" + id).appendChild(custom);
    
                    if (inputs[i]["show-if"]) {
                        //no se ha probado en select
                        showIfValues.push({ id, input: custom, if: inputs[i]["show-if"] })
                    }
    
                    break;
            }
        }
        for(let i in showIfValues){
            showIf(showIfValues[i].id, showIfValues[i].input, showIfValues[i].if);
        }
    }
  function showIf(id, input, ifValue){
     
    input.querySelector("input").setAttribute("disabled", "disabled");
    input.classList.add("d-none");
   
     for(let i in ifValue){
        let inputValidate = document.querySelector("#"+i+"-"+id);
       
        
        inputValidate?.addEventListener("change", function(){
         
          let value = inputValidate.value;
           if(value == ifValue[i]){
             input.classList.remove("d-none");
             input.querySelector("input").removeAttribute("disabled");
             inputValidate.classList.add("no-send");
           }else{
             input.classList.add("d-none");
             input.querySelector("input").setAttribute("disabled", "disabled");
             inputValidate.classList.remove("no-send");
           }
        });
     }
 }
  function openModalInRecommendations(id, title, price, description, image, url, collections) {
         // buscar si el id existe en los valores de loaded
        
            if (loaded.indexOf(id) == -1) {
                
              
                   if (syncdata) {
                     collections = collections.replaceAll("'", '"');
                     collections = JSON.parse(collections);
                      
                       for (let i in collections ) {
                           loadInputs(collections[i], id, syncdata);
                         
                       }
                     loaded.push(id);
                   } else {
                       console.log("error al cargar los datos");
                   }
   
            }

         let forms = document.querySelectorAll(".form-product-inner");
         let slot_form = document.querySelector("#modal-details .modal-body .product-form");
         if (forms.length > 0) {
             forms.forEach(form => {
                 slot_form.appendChild(form);
             });
         }
 
         let modal = document.querySelector("#modal-details");
 
 
         let slots = {
             "product-title": title,
             "product-price": price,
             "product-image": image,
             "product-description": description,
             "product-link": `<a href="${url}" >More Details</a>`
 
         };
         for (const [key, value] of Object.entries(slots)) {
             let slot = modal.querySelector("." + key);
             if (key != "product-image") {
                 slot.innerHTML = value;
             } else {
                 slot.innerHTML = `<img style="width:100%; height:100%;" src="${value}&height=350" class="radius shadow img-fluid">`;
             }
         }
 
         let newForm = document.querySelector("#form-" + id);
         let formActive = modal.querySelector(".form-product-inner:not(.d-none)");
 
         if (formActive) {
             if (formActive.id != newForm.id) {
                 formActive.classList.add("d-none");
                 newForm.classList.remove("d-none");
             }
         } else {
             newForm.classList.remove("d-none");
         }
 
  }
 
 </script>